// Code generated by Kitex v0.8.0. DO NOT EDIT.

package speedyread

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	speedy_read "speedy/read/kitex_gen/speedy_read"
)

func serviceInfo() *kitex.ServiceInfo {
	return speedyReadServiceInfo
}

var speedyReadServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SpeedyRead"
	handlerType := (*speedy_read.SpeedyRead)(nil)
	methods := map[string]kitex.MethodInfo{
		"echo":           kitex.NewMethodInfo(echoHandler, newSpeedyReadEchoArgs, newSpeedyReadEchoResult, false),
		"GetSiteInfo":    kitex.NewMethodInfo(getSiteInfoHandler, newSpeedyReadGetSiteInfoArgs, newSpeedyReadGetSiteInfoResult, false),
		"CreateSiteInfo": kitex.NewMethodInfo(createSiteInfoHandler, newSpeedyReadCreateSiteInfoArgs, newSpeedyReadCreateSiteInfoResult, false),
		"ArticleList":    kitex.NewMethodInfo(articleListHandler, newSpeedyReadArticleListArgs, newSpeedyReadArticleListResult, false),
		"CreateArticle":  kitex.NewMethodInfo(createArticleHandler, newSpeedyReadCreateArticleArgs, newSpeedyReadCreateArticleResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "speedy_read",
		"ServiceFilePath": `thrift/speedy_read.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*speedy_read.SpeedyReadEchoArgs)
	realResult := result.(*speedy_read.SpeedyReadEchoResult)
	success, err := handler.(speedy_read.SpeedyRead).Echo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSpeedyReadEchoArgs() interface{} {
	return speedy_read.NewSpeedyReadEchoArgs()
}

func newSpeedyReadEchoResult() interface{} {
	return speedy_read.NewSpeedyReadEchoResult()
}

func getSiteInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*speedy_read.SpeedyReadGetSiteInfoArgs)
	realResult := result.(*speedy_read.SpeedyReadGetSiteInfoResult)
	success, err := handler.(speedy_read.SpeedyRead).GetSiteInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSpeedyReadGetSiteInfoArgs() interface{} {
	return speedy_read.NewSpeedyReadGetSiteInfoArgs()
}

func newSpeedyReadGetSiteInfoResult() interface{} {
	return speedy_read.NewSpeedyReadGetSiteInfoResult()
}

func createSiteInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*speedy_read.SpeedyReadCreateSiteInfoArgs)
	realResult := result.(*speedy_read.SpeedyReadCreateSiteInfoResult)
	success, err := handler.(speedy_read.SpeedyRead).CreateSiteInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSpeedyReadCreateSiteInfoArgs() interface{} {
	return speedy_read.NewSpeedyReadCreateSiteInfoArgs()
}

func newSpeedyReadCreateSiteInfoResult() interface{} {
	return speedy_read.NewSpeedyReadCreateSiteInfoResult()
}

func articleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*speedy_read.SpeedyReadArticleListArgs)
	realResult := result.(*speedy_read.SpeedyReadArticleListResult)
	success, err := handler.(speedy_read.SpeedyRead).ArticleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSpeedyReadArticleListArgs() interface{} {
	return speedy_read.NewSpeedyReadArticleListArgs()
}

func newSpeedyReadArticleListResult() interface{} {
	return speedy_read.NewSpeedyReadArticleListResult()
}

func createArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*speedy_read.SpeedyReadCreateArticleArgs)
	realResult := result.(*speedy_read.SpeedyReadCreateArticleResult)
	success, err := handler.(speedy_read.SpeedyRead).CreateArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSpeedyReadCreateArticleArgs() interface{} {
	return speedy_read.NewSpeedyReadCreateArticleArgs()
}

func newSpeedyReadCreateArticleResult() interface{} {
	return speedy_read.NewSpeedyReadCreateArticleResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, req *speedy_read.Request) (r *speedy_read.Response, err error) {
	var _args speedy_read.SpeedyReadEchoArgs
	_args.Req = req
	var _result speedy_read.SpeedyReadEchoResult
	if err = p.c.Call(ctx, "echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSiteInfo(ctx context.Context, req *speedy_read.GetSiteRequest) (r *speedy_read.GetSiteResponse, err error) {
	var _args speedy_read.SpeedyReadGetSiteInfoArgs
	_args.Req = req
	var _result speedy_read.SpeedyReadGetSiteInfoResult
	if err = p.c.Call(ctx, "GetSiteInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSiteInfo(ctx context.Context, req *speedy_read.CreateSiteRequest) (r *speedy_read.CreateSiteResponse, err error) {
	var _args speedy_read.SpeedyReadCreateSiteInfoArgs
	_args.Req = req
	var _result speedy_read.SpeedyReadCreateSiteInfoResult
	if err = p.c.Call(ctx, "CreateSiteInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleList(ctx context.Context, req *speedy_read.GetArticleListRequest) (r *speedy_read.GetArticleListResponse, err error) {
	var _args speedy_read.SpeedyReadArticleListArgs
	_args.Req = req
	var _result speedy_read.SpeedyReadArticleListResult
	if err = p.c.Call(ctx, "ArticleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateArticle(ctx context.Context, req *speedy_read.CreateArticleRequest) (r *speedy_read.CreateArticleResponse, err error) {
	var _args speedy_read.SpeedyReadCreateArticleArgs
	_args.Req = req
	var _result speedy_read.SpeedyReadCreateArticleResult
	if err = p.c.Call(ctx, "CreateArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
