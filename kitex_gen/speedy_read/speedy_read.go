// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package speedy_read

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	TypeArticle = "article"

	TypeNew = "new"

	TradingBearish = 1

	TradingBullish = 2
)

type Request struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewRequest() *Request {
	return &Request{}
}

func (p *Request) InitDefault() {
	*p = Request{}
}

func (p *Request) GetMessage() (v string) {
	return p.Message
}
func (p *Request) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_Request = map[int16]string{
	1: "message",
}

func (p *Request) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Request[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Request) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *Request) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)

}

func (p *Request) DeepEqual(ano *Request) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *Request) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type Response struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewResponse() *Response {
	return &Response{}
}

func (p *Response) InitDefault() {
	*p = Response{}
}

func (p *Response) GetMessage() (v string) {
	return p.Message
}
func (p *Response) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_Response = map[int16]string{
	1: "message",
}

func (p *Response) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Response[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Response) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *Response) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Response(%+v)", *p)

}

func (p *Response) DeepEqual(ano *Response) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *Response) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetSiteRequest struct {
}

func NewGetSiteRequest() *GetSiteRequest {
	return &GetSiteRequest{}
}

func (p *GetSiteRequest) InitDefault() {
	*p = GetSiteRequest{}
}

var fieldIDToName_GetSiteRequest = map[int16]string{}

func (p *GetSiteRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSiteRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetSiteRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSiteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSiteRequest(%+v)", *p)

}

func (p *GetSiteRequest) DeepEqual(ano *GetSiteRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetSiteResponse struct {
	SiteList []*SiteInfo `thrift:"SiteList,1" frugal:"1,default,list<SiteInfo>" json:"SiteList"`
}

func NewGetSiteResponse() *GetSiteResponse {
	return &GetSiteResponse{}
}

func (p *GetSiteResponse) InitDefault() {
	*p = GetSiteResponse{}
}

func (p *GetSiteResponse) GetSiteList() (v []*SiteInfo) {
	return p.SiteList
}
func (p *GetSiteResponse) SetSiteList(val []*SiteInfo) {
	p.SiteList = val
}

var fieldIDToName_GetSiteResponse = map[int16]string{
	1: "SiteList",
}

func (p *GetSiteResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSiteResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSiteResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SiteList = make([]*SiteInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSiteInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SiteList = append(p.SiteList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetSiteResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSiteResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSiteResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SiteList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SiteList)); err != nil {
		return err
	}
	for _, v := range p.SiteList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSiteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSiteResponse(%+v)", *p)

}

func (p *GetSiteResponse) DeepEqual(ano *GetSiteResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SiteList) {
		return false
	}
	return true
}

func (p *GetSiteResponse) Field1DeepEqual(src []*SiteInfo) bool {

	if len(p.SiteList) != len(src) {
		return false
	}
	for i, v := range p.SiteList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type SiteInfo struct {
	ID          string    `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
	SiteMeta    *SiteMeta `thrift:"SiteMeta,2" frugal:"2,default,SiteMeta" json:"SiteMeta"`
	Url         string    `thrift:"Url,3" frugal:"3,default,string" json:"Url"`
	Description string    `thrift:"Description,4" frugal:"4,default,string" json:"Description"`
	Tag         string    `thrift:"Tag,5" frugal:"5,default,string" json:"Tag"`
	CreatedAt   string    `thrift:"CreatedAt,6" frugal:"6,default,string" json:"CreatedAt"`
	UpdatedAt   string    `thrift:"UpdatedAt,7" frugal:"7,default,string" json:"UpdatedAt"`
}

func NewSiteInfo() *SiteInfo {
	return &SiteInfo{}
}

func (p *SiteInfo) InitDefault() {
	*p = SiteInfo{}
}

func (p *SiteInfo) GetID() (v string) {
	return p.ID
}

var SiteInfo_SiteMeta_DEFAULT *SiteMeta

func (p *SiteInfo) GetSiteMeta() (v *SiteMeta) {
	if !p.IsSetSiteMeta() {
		return SiteInfo_SiteMeta_DEFAULT
	}
	return p.SiteMeta
}

func (p *SiteInfo) GetUrl() (v string) {
	return p.Url
}

func (p *SiteInfo) GetDescription() (v string) {
	return p.Description
}

func (p *SiteInfo) GetTag() (v string) {
	return p.Tag
}

func (p *SiteInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *SiteInfo) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *SiteInfo) SetID(val string) {
	p.ID = val
}
func (p *SiteInfo) SetSiteMeta(val *SiteMeta) {
	p.SiteMeta = val
}
func (p *SiteInfo) SetUrl(val string) {
	p.Url = val
}
func (p *SiteInfo) SetDescription(val string) {
	p.Description = val
}
func (p *SiteInfo) SetTag(val string) {
	p.Tag = val
}
func (p *SiteInfo) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *SiteInfo) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

var fieldIDToName_SiteInfo = map[int16]string{
	1: "ID",
	2: "SiteMeta",
	3: "Url",
	4: "Description",
	5: "Tag",
	6: "CreatedAt",
	7: "UpdatedAt",
}

func (p *SiteInfo) IsSetSiteMeta() bool {
	return p.SiteMeta != nil
}

func (p *SiteInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SiteInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SiteInfo) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}
func (p *SiteInfo) ReadField2(iprot thrift.TProtocol) error {
	p.SiteMeta = NewSiteMeta()
	if err := p.SiteMeta.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *SiteInfo) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Url = v
	}
	return nil
}
func (p *SiteInfo) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}
func (p *SiteInfo) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tag = v
	}
	return nil
}
func (p *SiteInfo) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}
func (p *SiteInfo) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdatedAt = v
	}
	return nil
}

func (p *SiteInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SiteInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SiteInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SiteInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SiteMeta", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SiteMeta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SiteInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Url", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SiteInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SiteInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Tag", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SiteInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SiteInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SiteInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SiteInfo(%+v)", *p)

}

func (p *SiteInfo) DeepEqual(ano *SiteInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SiteMeta) {
		return false
	}
	if !p.Field3DeepEqual(ano.Url) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tag) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *SiteInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}
func (p *SiteInfo) Field2DeepEqual(src *SiteMeta) bool {

	if !p.SiteMeta.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SiteInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *SiteInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *SiteInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Tag, src) != 0 {
		return false
	}
	return true
}
func (p *SiteInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *SiteInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}

type SiteMeta struct {
	ID        string `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
	SiteID    string `thrift:"SiteID,2" frugal:"2,default,string" json:"SiteID"`
	MetaType  string `thrift:"MetaType,3" frugal:"3,default,string" json:"MetaType"`
	MetaKey   string `thrift:"MetaKey,4" frugal:"4,default,string" json:"MetaKey"`
	MetaValue string `thrift:"MetaValue,5" frugal:"5,default,string" json:"MetaValue"`
	CreatedAt string `thrift:"CreatedAt,6" frugal:"6,default,string" json:"CreatedAt"`
	UpdatedAt string `thrift:"UpdatedAt,7" frugal:"7,default,string" json:"UpdatedAt"`
}

func NewSiteMeta() *SiteMeta {
	return &SiteMeta{}
}

func (p *SiteMeta) InitDefault() {
	*p = SiteMeta{}
}

func (p *SiteMeta) GetID() (v string) {
	return p.ID
}

func (p *SiteMeta) GetSiteID() (v string) {
	return p.SiteID
}

func (p *SiteMeta) GetMetaType() (v string) {
	return p.MetaType
}

func (p *SiteMeta) GetMetaKey() (v string) {
	return p.MetaKey
}

func (p *SiteMeta) GetMetaValue() (v string) {
	return p.MetaValue
}

func (p *SiteMeta) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *SiteMeta) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *SiteMeta) SetID(val string) {
	p.ID = val
}
func (p *SiteMeta) SetSiteID(val string) {
	p.SiteID = val
}
func (p *SiteMeta) SetMetaType(val string) {
	p.MetaType = val
}
func (p *SiteMeta) SetMetaKey(val string) {
	p.MetaKey = val
}
func (p *SiteMeta) SetMetaValue(val string) {
	p.MetaValue = val
}
func (p *SiteMeta) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *SiteMeta) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

var fieldIDToName_SiteMeta = map[int16]string{
	1: "ID",
	2: "SiteID",
	3: "MetaType",
	4: "MetaKey",
	5: "MetaValue",
	6: "CreatedAt",
	7: "UpdatedAt",
}

func (p *SiteMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SiteMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SiteMeta) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}
func (p *SiteMeta) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SiteID = v
	}
	return nil
}
func (p *SiteMeta) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaType = v
	}
	return nil
}
func (p *SiteMeta) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaKey = v
	}
	return nil
}
func (p *SiteMeta) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaValue = v
	}
	return nil
}
func (p *SiteMeta) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}
func (p *SiteMeta) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdatedAt = v
	}
	return nil
}

func (p *SiteMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SiteMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SiteMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SiteMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SiteID", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SiteID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SiteMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaType", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SiteMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaKey", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SiteMeta) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaValue", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SiteMeta) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SiteMeta) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SiteMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SiteMeta(%+v)", *p)

}

func (p *SiteMeta) DeepEqual(ano *SiteMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SiteID) {
		return false
	}
	if !p.Field3DeepEqual(ano.MetaType) {
		return false
	}
	if !p.Field4DeepEqual(ano.MetaKey) {
		return false
	}
	if !p.Field5DeepEqual(ano.MetaValue) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *SiteMeta) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}
func (p *SiteMeta) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SiteID, src) != 0 {
		return false
	}
	return true
}
func (p *SiteMeta) Field3DeepEqual(src string) bool {

	if strings.Compare(p.MetaType, src) != 0 {
		return false
	}
	return true
}
func (p *SiteMeta) Field4DeepEqual(src string) bool {

	if strings.Compare(p.MetaKey, src) != 0 {
		return false
	}
	return true
}
func (p *SiteMeta) Field5DeepEqual(src string) bool {

	if strings.Compare(p.MetaValue, src) != 0 {
		return false
	}
	return true
}
func (p *SiteMeta) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *SiteMeta) Field7DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}

type CreateSiteRequest struct {
	MetaType    string `thrift:"MetaType,1" frugal:"1,default,string" json:"MetaType"`
	MetaKey     string `thrift:"MetaKey,2" frugal:"2,default,string" json:"MetaKey"`
	MetaValue   string `thrift:"MetaValue,3" frugal:"3,default,string" json:"MetaValue"`
	Url         string `thrift:"Url,4" frugal:"4,default,string" json:"Url"`
	Description string `thrift:"Description,5" frugal:"5,default,string" json:"Description"`
	Tag         string `thrift:"Tag,6" frugal:"6,default,string" json:"Tag"`
}

func NewCreateSiteRequest() *CreateSiteRequest {
	return &CreateSiteRequest{}
}

func (p *CreateSiteRequest) InitDefault() {
	*p = CreateSiteRequest{}
}

func (p *CreateSiteRequest) GetMetaType() (v string) {
	return p.MetaType
}

func (p *CreateSiteRequest) GetMetaKey() (v string) {
	return p.MetaKey
}

func (p *CreateSiteRequest) GetMetaValue() (v string) {
	return p.MetaValue
}

func (p *CreateSiteRequest) GetUrl() (v string) {
	return p.Url
}

func (p *CreateSiteRequest) GetDescription() (v string) {
	return p.Description
}

func (p *CreateSiteRequest) GetTag() (v string) {
	return p.Tag
}
func (p *CreateSiteRequest) SetMetaType(val string) {
	p.MetaType = val
}
func (p *CreateSiteRequest) SetMetaKey(val string) {
	p.MetaKey = val
}
func (p *CreateSiteRequest) SetMetaValue(val string) {
	p.MetaValue = val
}
func (p *CreateSiteRequest) SetUrl(val string) {
	p.Url = val
}
func (p *CreateSiteRequest) SetDescription(val string) {
	p.Description = val
}
func (p *CreateSiteRequest) SetTag(val string) {
	p.Tag = val
}

var fieldIDToName_CreateSiteRequest = map[int16]string{
	1: "MetaType",
	2: "MetaKey",
	3: "MetaValue",
	4: "Url",
	5: "Description",
	6: "Tag",
}

func (p *CreateSiteRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateSiteRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateSiteRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaType = v
	}
	return nil
}
func (p *CreateSiteRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaKey = v
	}
	return nil
}
func (p *CreateSiteRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaValue = v
	}
	return nil
}
func (p *CreateSiteRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Url = v
	}
	return nil
}
func (p *CreateSiteRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}
func (p *CreateSiteRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tag = v
	}
	return nil
}

func (p *CreateSiteRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSiteRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateSiteRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaType", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateSiteRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaKey", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateSiteRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaValue", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateSiteRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Url", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateSiteRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateSiteRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Tag", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateSiteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSiteRequest(%+v)", *p)

}

func (p *CreateSiteRequest) DeepEqual(ano *CreateSiteRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MetaType) {
		return false
	}
	if !p.Field2DeepEqual(ano.MetaKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.MetaValue) {
		return false
	}
	if !p.Field4DeepEqual(ano.Url) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Tag) {
		return false
	}
	return true
}

func (p *CreateSiteRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.MetaType, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSiteRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.MetaKey, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSiteRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.MetaValue, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSiteRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSiteRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSiteRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Tag, src) != 0 {
		return false
	}
	return true
}

type CreateSiteResponse struct {
	ID string `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
}

func NewCreateSiteResponse() *CreateSiteResponse {
	return &CreateSiteResponse{}
}

func (p *CreateSiteResponse) InitDefault() {
	*p = CreateSiteResponse{}
}

func (p *CreateSiteResponse) GetID() (v string) {
	return p.ID
}
func (p *CreateSiteResponse) SetID(val string) {
	p.ID = val
}

var fieldIDToName_CreateSiteResponse = map[int16]string{
	1: "ID",
}

func (p *CreateSiteResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateSiteResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateSiteResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}

func (p *CreateSiteResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSiteResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateSiteResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateSiteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSiteResponse(%+v)", *p)

}

func (p *CreateSiteResponse) DeepEqual(ano *CreateSiteResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	return true
}

func (p *CreateSiteResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}

type GetArticleListRequest struct {
	SiteIdList  []string `thrift:"SiteIdList,1" frugal:"1,default,list<string>" json:"SiteIdList"`
	ArticleType string   `thrift:"ArticleType,2" frugal:"2,default,string" json:"ArticleType"`
	Limit       int32    `thrift:"Limit,3" frugal:"3,default,i32" json:"Limit"`
	Offset      int32    `thrift:"Offset,4" frugal:"4,default,i32" json:"Offset"`
}

func NewGetArticleListRequest() *GetArticleListRequest {
	return &GetArticleListRequest{}
}

func (p *GetArticleListRequest) InitDefault() {
	*p = GetArticleListRequest{}
}

func (p *GetArticleListRequest) GetSiteIdList() (v []string) {
	return p.SiteIdList
}

func (p *GetArticleListRequest) GetArticleType() (v string) {
	return p.ArticleType
}

func (p *GetArticleListRequest) GetLimit() (v int32) {
	return p.Limit
}

func (p *GetArticleListRequest) GetOffset() (v int32) {
	return p.Offset
}
func (p *GetArticleListRequest) SetSiteIdList(val []string) {
	p.SiteIdList = val
}
func (p *GetArticleListRequest) SetArticleType(val string) {
	p.ArticleType = val
}
func (p *GetArticleListRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *GetArticleListRequest) SetOffset(val int32) {
	p.Offset = val
}

var fieldIDToName_GetArticleListRequest = map[int16]string{
	1: "SiteIdList",
	2: "ArticleType",
	3: "Limit",
	4: "Offset",
}

func (p *GetArticleListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetArticleListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetArticleListRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SiteIdList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SiteIdList = append(p.SiteIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *GetArticleListRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ArticleType = v
	}
	return nil
}
func (p *GetArticleListRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}
func (p *GetArticleListRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetArticleListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetArticleListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetArticleListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SiteIdList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SiteIdList)); err != nil {
		return err
	}
	for _, v := range p.SiteIdList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetArticleListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArticleType", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ArticleType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetArticleListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Limit", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetArticleListRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Offset", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetArticleListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetArticleListRequest(%+v)", *p)

}

func (p *GetArticleListRequest) DeepEqual(ano *GetArticleListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SiteIdList) {
		return false
	}
	if !p.Field2DeepEqual(ano.ArticleType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field4DeepEqual(ano.Offset) {
		return false
	}
	return true
}

func (p *GetArticleListRequest) Field1DeepEqual(src []string) bool {

	if len(p.SiteIdList) != len(src) {
		return false
	}
	for i, v := range p.SiteIdList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetArticleListRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ArticleType, src) != 0 {
		return false
	}
	return true
}
func (p *GetArticleListRequest) Field3DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *GetArticleListRequest) Field4DeepEqual(src int32) bool {

	if p.Offset != src {
		return false
	}
	return true
}

type GetArticleListResponse struct {
	ArticleList []*Article `thrift:"ArticleList,1" frugal:"1,default,list<Article>" json:"ArticleList"`
}

func NewGetArticleListResponse() *GetArticleListResponse {
	return &GetArticleListResponse{}
}

func (p *GetArticleListResponse) InitDefault() {
	*p = GetArticleListResponse{}
}

func (p *GetArticleListResponse) GetArticleList() (v []*Article) {
	return p.ArticleList
}
func (p *GetArticleListResponse) SetArticleList(val []*Article) {
	p.ArticleList = val
}

var fieldIDToName_GetArticleListResponse = map[int16]string{
	1: "ArticleList",
}

func (p *GetArticleListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetArticleListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetArticleListResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ArticleList = make([]*Article, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewArticle()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ArticleList = append(p.ArticleList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetArticleListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetArticleListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetArticleListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArticleList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArticleList)); err != nil {
		return err
	}
	for _, v := range p.ArticleList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetArticleListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetArticleListResponse(%+v)", *p)

}

func (p *GetArticleListResponse) DeepEqual(ano *GetArticleListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ArticleList) {
		return false
	}
	return true
}

func (p *GetArticleListResponse) Field1DeepEqual(src []*Article) bool {

	if len(p.ArticleList) != len(src) {
		return false
	}
	for i, v := range p.ArticleList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type Article struct {
	ID              string         `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
	Author          *Author        `thrift:"Author,2" frugal:"2,default,Author" json:"Author"`
	Site            *SiteInfo      `thrift:"Site,3" frugal:"3,default,SiteInfo" json:"Site"`
	ArticleMetaList []*ArticleMeta `thrift:"ArticleMetaList,4" frugal:"4,default,list<ArticleMeta>" json:"ArticleMetaList"`
	Language        string         `thrift:"Language,5" frugal:"5,default,string" json:"Language"`
	PublishAt       string         `thrift:"PublishAt,6" frugal:"6,default,string" json:"PublishAt"`
	Url             string         `thrift:"Url,7" frugal:"7,default,string" json:"Url"`
	Type            string         `thrift:"Type,8" frugal:"8,default,string" json:"Type"`
	Title           string         `thrift:"Title,9" frugal:"9,default,string" json:"Title"`
	Content         string         `thrift:"Content,10" frugal:"10,default,string" json:"Content"`
	Status          int32          `thrift:"Status,11" frugal:"11,default,i32" json:"Status"`
	Score           int32          `thrift:"Score,12" frugal:"12,default,i32" json:"Score"`
	CreatedAt       string         `thrift:"CreatedAt,13" frugal:"13,default,string" json:"CreatedAt"`
	UpdatedAt       string         `thrift:"UpdatedAt,14" frugal:"14,default,string" json:"UpdatedAt"`
}

func NewArticle() *Article {
	return &Article{}
}

func (p *Article) InitDefault() {
	*p = Article{}
}

func (p *Article) GetID() (v string) {
	return p.ID
}

var Article_Author_DEFAULT *Author

func (p *Article) GetAuthor() (v *Author) {
	if !p.IsSetAuthor() {
		return Article_Author_DEFAULT
	}
	return p.Author
}

var Article_Site_DEFAULT *SiteInfo

func (p *Article) GetSite() (v *SiteInfo) {
	if !p.IsSetSite() {
		return Article_Site_DEFAULT
	}
	return p.Site
}

func (p *Article) GetArticleMetaList() (v []*ArticleMeta) {
	return p.ArticleMetaList
}

func (p *Article) GetLanguage() (v string) {
	return p.Language
}

func (p *Article) GetPublishAt() (v string) {
	return p.PublishAt
}

func (p *Article) GetUrl() (v string) {
	return p.Url
}

func (p *Article) GetType() (v string) {
	return p.Type
}

func (p *Article) GetTitle() (v string) {
	return p.Title
}

func (p *Article) GetContent() (v string) {
	return p.Content
}

func (p *Article) GetStatus() (v int32) {
	return p.Status
}

func (p *Article) GetScore() (v int32) {
	return p.Score
}

func (p *Article) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Article) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *Article) SetID(val string) {
	p.ID = val
}
func (p *Article) SetAuthor(val *Author) {
	p.Author = val
}
func (p *Article) SetSite(val *SiteInfo) {
	p.Site = val
}
func (p *Article) SetArticleMetaList(val []*ArticleMeta) {
	p.ArticleMetaList = val
}
func (p *Article) SetLanguage(val string) {
	p.Language = val
}
func (p *Article) SetPublishAt(val string) {
	p.PublishAt = val
}
func (p *Article) SetUrl(val string) {
	p.Url = val
}
func (p *Article) SetType(val string) {
	p.Type = val
}
func (p *Article) SetTitle(val string) {
	p.Title = val
}
func (p *Article) SetContent(val string) {
	p.Content = val
}
func (p *Article) SetStatus(val int32) {
	p.Status = val
}
func (p *Article) SetScore(val int32) {
	p.Score = val
}
func (p *Article) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Article) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

var fieldIDToName_Article = map[int16]string{
	1:  "ID",
	2:  "Author",
	3:  "Site",
	4:  "ArticleMetaList",
	5:  "Language",
	6:  "PublishAt",
	7:  "Url",
	8:  "Type",
	9:  "Title",
	10: "Content",
	11: "Status",
	12: "Score",
	13: "CreatedAt",
	14: "UpdatedAt",
}

func (p *Article) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *Article) IsSetSite() bool {
	return p.Site != nil
}

func (p *Article) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Article[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Article) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}
func (p *Article) ReadField2(iprot thrift.TProtocol) error {
	p.Author = NewAuthor()
	if err := p.Author.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *Article) ReadField3(iprot thrift.TProtocol) error {
	p.Site = NewSiteInfo()
	if err := p.Site.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *Article) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ArticleMetaList = make([]*ArticleMeta, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewArticleMeta()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ArticleMetaList = append(p.ArticleMetaList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *Article) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Language = v
	}
	return nil
}
func (p *Article) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PublishAt = v
	}
	return nil
}
func (p *Article) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Url = v
	}
	return nil
}
func (p *Article) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}
func (p *Article) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *Article) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}
func (p *Article) ReadField11(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}
func (p *Article) ReadField12(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Score = v
	}
	return nil
}
func (p *Article) ReadField13(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}
func (p *Article) ReadField14(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdatedAt = v
	}
	return nil
}

func (p *Article) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Article"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Article) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Article) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Author", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Author.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Article) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Site", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Site.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Article) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArticleMetaList", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArticleMetaList)); err != nil {
		return err
	}
	for _, v := range p.ArticleMetaList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Article) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Language", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Language); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Article) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PublishAt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PublishAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Article) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Url", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Article) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Article) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Title", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Article) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Content", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Article) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Article) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Score", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Score); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Article) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Article) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *Article) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Article(%+v)", *p)

}

func (p *Article) DeepEqual(ano *Article) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Author) {
		return false
	}
	if !p.Field3DeepEqual(ano.Site) {
		return false
	}
	if !p.Field4DeepEqual(ano.ArticleMetaList) {
		return false
	}
	if !p.Field5DeepEqual(ano.Language) {
		return false
	}
	if !p.Field6DeepEqual(ano.PublishAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.Url) {
		return false
	}
	if !p.Field8DeepEqual(ano.Type) {
		return false
	}
	if !p.Field9DeepEqual(ano.Title) {
		return false
	}
	if !p.Field10DeepEqual(ano.Content) {
		return false
	}
	if !p.Field11DeepEqual(ano.Status) {
		return false
	}
	if !p.Field12DeepEqual(ano.Score) {
		return false
	}
	if !p.Field13DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field14DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *Article) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}
func (p *Article) Field2DeepEqual(src *Author) bool {

	if !p.Author.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Article) Field3DeepEqual(src *SiteInfo) bool {

	if !p.Site.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Article) Field4DeepEqual(src []*ArticleMeta) bool {

	if len(p.ArticleMetaList) != len(src) {
		return false
	}
	for i, v := range p.ArticleMetaList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Article) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Language, src) != 0 {
		return false
	}
	return true
}
func (p *Article) Field6DeepEqual(src string) bool {

	if strings.Compare(p.PublishAt, src) != 0 {
		return false
	}
	return true
}
func (p *Article) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *Article) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *Article) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *Article) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *Article) Field11DeepEqual(src int32) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *Article) Field12DeepEqual(src int32) bool {

	if p.Score != src {
		return false
	}
	return true
}
func (p *Article) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *Article) Field14DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}

type Author struct {
	ID         string `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
	Url        string `thrift:"Url,2" frugal:"2,default,string" json:"Url"`
	AuthorName string `thrift:"AuthorName,3" frugal:"3,default,string" json:"AuthorName"`
	Image      string `thrift:"Image,4" frugal:"4,default,string" json:"Image"`
	CreatedAt  string `thrift:"CreatedAt,5" frugal:"5,default,string" json:"CreatedAt"`
	UpdatedAt  string `thrift:"UpdatedAt,6" frugal:"6,default,string" json:"UpdatedAt"`
}

func NewAuthor() *Author {
	return &Author{}
}

func (p *Author) InitDefault() {
	*p = Author{}
}

func (p *Author) GetID() (v string) {
	return p.ID
}

func (p *Author) GetUrl() (v string) {
	return p.Url
}

func (p *Author) GetAuthorName() (v string) {
	return p.AuthorName
}

func (p *Author) GetImage() (v string) {
	return p.Image
}

func (p *Author) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Author) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *Author) SetID(val string) {
	p.ID = val
}
func (p *Author) SetUrl(val string) {
	p.Url = val
}
func (p *Author) SetAuthorName(val string) {
	p.AuthorName = val
}
func (p *Author) SetImage(val string) {
	p.Image = val
}
func (p *Author) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Author) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

var fieldIDToName_Author = map[int16]string{
	1: "ID",
	2: "Url",
	3: "AuthorName",
	4: "Image",
	5: "CreatedAt",
	6: "UpdatedAt",
}

func (p *Author) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Author[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Author) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}
func (p *Author) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Url = v
	}
	return nil
}
func (p *Author) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AuthorName = v
	}
	return nil
}
func (p *Author) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Image = v
	}
	return nil
}
func (p *Author) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}
func (p *Author) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdatedAt = v
	}
	return nil
}

func (p *Author) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Author"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Author) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Author) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Url", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Author) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AuthorName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AuthorName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Author) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Image", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Image); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Author) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Author) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Author) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Author(%+v)", *p)

}

func (p *Author) DeepEqual(ano *Author) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Url) {
		return false
	}
	if !p.Field3DeepEqual(ano.AuthorName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Image) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *Author) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}
func (p *Author) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *Author) Field3DeepEqual(src string) bool {

	if strings.Compare(p.AuthorName, src) != 0 {
		return false
	}
	return true
}
func (p *Author) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Image, src) != 0 {
		return false
	}
	return true
}
func (p *Author) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *Author) Field6DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}

type ArticleMeta struct {
	ID        string `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
	ArticleID string `thrift:"ArticleID,2" frugal:"2,default,string" json:"ArticleID"`
	MetaType  string `thrift:"MetaType,3" frugal:"3,default,string" json:"MetaType"`
	MetaKey   string `thrift:"MetaKey,4" frugal:"4,default,string" json:"MetaKey"`
	MetaValue string `thrift:"MetaValue,5" frugal:"5,default,string" json:"MetaValue"`
	CreatedAt string `thrift:"CreatedAt,6" frugal:"6,default,string" json:"CreatedAt"`
	UpdatedAt string `thrift:"UpdatedAt,7" frugal:"7,default,string" json:"UpdatedAt"`
}

func NewArticleMeta() *ArticleMeta {
	return &ArticleMeta{}
}

func (p *ArticleMeta) InitDefault() {
	*p = ArticleMeta{}
}

func (p *ArticleMeta) GetID() (v string) {
	return p.ID
}

func (p *ArticleMeta) GetArticleID() (v string) {
	return p.ArticleID
}

func (p *ArticleMeta) GetMetaType() (v string) {
	return p.MetaType
}

func (p *ArticleMeta) GetMetaKey() (v string) {
	return p.MetaKey
}

func (p *ArticleMeta) GetMetaValue() (v string) {
	return p.MetaValue
}

func (p *ArticleMeta) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *ArticleMeta) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *ArticleMeta) SetID(val string) {
	p.ID = val
}
func (p *ArticleMeta) SetArticleID(val string) {
	p.ArticleID = val
}
func (p *ArticleMeta) SetMetaType(val string) {
	p.MetaType = val
}
func (p *ArticleMeta) SetMetaKey(val string) {
	p.MetaKey = val
}
func (p *ArticleMeta) SetMetaValue(val string) {
	p.MetaValue = val
}
func (p *ArticleMeta) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *ArticleMeta) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

var fieldIDToName_ArticleMeta = map[int16]string{
	1: "ID",
	2: "ArticleID",
	3: "MetaType",
	4: "MetaKey",
	5: "MetaValue",
	6: "CreatedAt",
	7: "UpdatedAt",
}

func (p *ArticleMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleMeta) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}
func (p *ArticleMeta) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ArticleID = v
	}
	return nil
}
func (p *ArticleMeta) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaType = v
	}
	return nil
}
func (p *ArticleMeta) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaKey = v
	}
	return nil
}
func (p *ArticleMeta) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MetaValue = v
	}
	return nil
}
func (p *ArticleMeta) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}
func (p *ArticleMeta) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdatedAt = v
	}
	return nil
}

func (p *ArticleMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArticleID", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ArticleID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArticleMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaType", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ArticleMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaKey", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ArticleMeta) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MetaValue", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MetaValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ArticleMeta) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ArticleMeta) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ArticleMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleMeta(%+v)", *p)

}

func (p *ArticleMeta) DeepEqual(ano *ArticleMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ArticleID) {
		return false
	}
	if !p.Field3DeepEqual(ano.MetaType) {
		return false
	}
	if !p.Field4DeepEqual(ano.MetaKey) {
		return false
	}
	if !p.Field5DeepEqual(ano.MetaValue) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *ArticleMeta) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleMeta) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ArticleID, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleMeta) Field3DeepEqual(src string) bool {

	if strings.Compare(p.MetaType, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleMeta) Field4DeepEqual(src string) bool {

	if strings.Compare(p.MetaKey, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleMeta) Field5DeepEqual(src string) bool {

	if strings.Compare(p.MetaValue, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleMeta) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleMeta) Field7DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}

type CreateArticleRequest struct {
	Article *Article `thrift:"Article,1" frugal:"1,default,Article" json:"Article"`
}

func NewCreateArticleRequest() *CreateArticleRequest {
	return &CreateArticleRequest{}
}

func (p *CreateArticleRequest) InitDefault() {
	*p = CreateArticleRequest{}
}

var CreateArticleRequest_Article_DEFAULT *Article

func (p *CreateArticleRequest) GetArticle() (v *Article) {
	if !p.IsSetArticle() {
		return CreateArticleRequest_Article_DEFAULT
	}
	return p.Article
}
func (p *CreateArticleRequest) SetArticle(val *Article) {
	p.Article = val
}

var fieldIDToName_CreateArticleRequest = map[int16]string{
	1: "Article",
}

func (p *CreateArticleRequest) IsSetArticle() bool {
	return p.Article != nil
}

func (p *CreateArticleRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateArticleRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateArticleRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Article = NewArticle()
	if err := p.Article.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateArticleRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateArticleRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateArticleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Article", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Article.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateArticleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateArticleRequest(%+v)", *p)

}

func (p *CreateArticleRequest) DeepEqual(ano *CreateArticleRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Article) {
		return false
	}
	return true
}

func (p *CreateArticleRequest) Field1DeepEqual(src *Article) bool {

	if !p.Article.DeepEqual(src) {
		return false
	}
	return true
}

type CreateArticleResponse struct {
	ID string `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
}

func NewCreateArticleResponse() *CreateArticleResponse {
	return &CreateArticleResponse{}
}

func (p *CreateArticleResponse) InitDefault() {
	*p = CreateArticleResponse{}
}

func (p *CreateArticleResponse) GetID() (v string) {
	return p.ID
}
func (p *CreateArticleResponse) SetID(val string) {
	p.ID = val
}

var fieldIDToName_CreateArticleResponse = map[int16]string{
	1: "ID",
}

func (p *CreateArticleResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateArticleResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateArticleResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}

func (p *CreateArticleResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateArticleResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateArticleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateArticleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateArticleResponse(%+v)", *p)

}

func (p *CreateArticleResponse) DeepEqual(ano *CreateArticleResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	return true
}

func (p *CreateArticleResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}

type RejectArticleRequest struct {
	ArticleID string `thrift:"ArticleID,1" frugal:"1,default,string" json:"ArticleID"`
}

func NewRejectArticleRequest() *RejectArticleRequest {
	return &RejectArticleRequest{}
}

func (p *RejectArticleRequest) InitDefault() {
	*p = RejectArticleRequest{}
}

func (p *RejectArticleRequest) GetArticleID() (v string) {
	return p.ArticleID
}
func (p *RejectArticleRequest) SetArticleID(val string) {
	p.ArticleID = val
}

var fieldIDToName_RejectArticleRequest = map[int16]string{
	1: "ArticleID",
}

func (p *RejectArticleRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RejectArticleRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RejectArticleRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ArticleID = v
	}
	return nil
}

func (p *RejectArticleRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RejectArticleRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RejectArticleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArticleID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ArticleID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RejectArticleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectArticleRequest(%+v)", *p)

}

func (p *RejectArticleRequest) DeepEqual(ano *RejectArticleRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ArticleID) {
		return false
	}
	return true
}

func (p *RejectArticleRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ArticleID, src) != 0 {
		return false
	}
	return true
}

type RejectArticleResponse struct {
	Success bool `thrift:"Success,1" frugal:"1,default,bool" json:"Success"`
}

func NewRejectArticleResponse() *RejectArticleResponse {
	return &RejectArticleResponse{}
}

func (p *RejectArticleResponse) InitDefault() {
	*p = RejectArticleResponse{}
}

func (p *RejectArticleResponse) GetSuccess() (v bool) {
	return p.Success
}
func (p *RejectArticleResponse) SetSuccess(val bool) {
	p.Success = val
}

var fieldIDToName_RejectArticleResponse = map[int16]string{
	1: "Success",
}

func (p *RejectArticleResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RejectArticleResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RejectArticleResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Success = v
	}
	return nil
}

func (p *RejectArticleResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RejectArticleResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RejectArticleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RejectArticleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectArticleResponse(%+v)", *p)

}

func (p *RejectArticleResponse) DeepEqual(ano *RejectArticleResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RejectArticleResponse) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}

type SaveArticleSummaryRequest struct {
	ArticleID       string                 `thrift:"ArticleID,1" frugal:"1,default,string" json:"ArticleID"`
	Title           string                 `thrift:"Title,2" frugal:"2,default,string" json:"Title"`
	Content         string                 `thrift:"Content,3" frugal:"3,default,string" json:"Content"`
	Summary         string                 `thrift:"Summary,4" frugal:"4,default,string" json:"Summary"`
	ContentSummary  *ArticleContentSummary `thrift:"ContentSummary,5" frugal:"5,default,ArticleContentSummary" json:"ContentSummary"`
	Outline         []*SummaryOutline      `thrift:"Outline,6" frugal:"6,default,list<SummaryOutline>" json:"Outline"`
	Tags            []string               `thrift:"tags,7" frugal:"7,default,list<string>" json:"tags"`
	TradingProposal int32                  `thrift:"TradingProposal,8" frugal:"8,default,i32" json:"TradingProposal"`
}

func NewSaveArticleSummaryRequest() *SaveArticleSummaryRequest {
	return &SaveArticleSummaryRequest{}
}

func (p *SaveArticleSummaryRequest) InitDefault() {
	*p = SaveArticleSummaryRequest{}
}

func (p *SaveArticleSummaryRequest) GetArticleID() (v string) {
	return p.ArticleID
}

func (p *SaveArticleSummaryRequest) GetTitle() (v string) {
	return p.Title
}

func (p *SaveArticleSummaryRequest) GetContent() (v string) {
	return p.Content
}

func (p *SaveArticleSummaryRequest) GetSummary() (v string) {
	return p.Summary
}

var SaveArticleSummaryRequest_ContentSummary_DEFAULT *ArticleContentSummary

func (p *SaveArticleSummaryRequest) GetContentSummary() (v *ArticleContentSummary) {
	if !p.IsSetContentSummary() {
		return SaveArticleSummaryRequest_ContentSummary_DEFAULT
	}
	return p.ContentSummary
}

func (p *SaveArticleSummaryRequest) GetOutline() (v []*SummaryOutline) {
	return p.Outline
}

func (p *SaveArticleSummaryRequest) GetTags() (v []string) {
	return p.Tags
}

func (p *SaveArticleSummaryRequest) GetTradingProposal() (v int32) {
	return p.TradingProposal
}
func (p *SaveArticleSummaryRequest) SetArticleID(val string) {
	p.ArticleID = val
}
func (p *SaveArticleSummaryRequest) SetTitle(val string) {
	p.Title = val
}
func (p *SaveArticleSummaryRequest) SetContent(val string) {
	p.Content = val
}
func (p *SaveArticleSummaryRequest) SetSummary(val string) {
	p.Summary = val
}
func (p *SaveArticleSummaryRequest) SetContentSummary(val *ArticleContentSummary) {
	p.ContentSummary = val
}
func (p *SaveArticleSummaryRequest) SetOutline(val []*SummaryOutline) {
	p.Outline = val
}
func (p *SaveArticleSummaryRequest) SetTags(val []string) {
	p.Tags = val
}
func (p *SaveArticleSummaryRequest) SetTradingProposal(val int32) {
	p.TradingProposal = val
}

var fieldIDToName_SaveArticleSummaryRequest = map[int16]string{
	1: "ArticleID",
	2: "Title",
	3: "Content",
	4: "Summary",
	5: "ContentSummary",
	6: "Outline",
	7: "tags",
	8: "TradingProposal",
}

func (p *SaveArticleSummaryRequest) IsSetContentSummary() bool {
	return p.ContentSummary != nil
}

func (p *SaveArticleSummaryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SaveArticleSummaryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ArticleID = v
	}
	return nil
}
func (p *SaveArticleSummaryRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *SaveArticleSummaryRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}
func (p *SaveArticleSummaryRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Summary = v
	}
	return nil
}
func (p *SaveArticleSummaryRequest) ReadField5(iprot thrift.TProtocol) error {
	p.ContentSummary = NewArticleContentSummary()
	if err := p.ContentSummary.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *SaveArticleSummaryRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Outline = make([]*SummaryOutline, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSummaryOutline()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Outline = append(p.Outline, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *SaveArticleSummaryRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tags = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Tags = append(p.Tags, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *SaveArticleSummaryRequest) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TradingProposal = v
	}
	return nil
}

func (p *SaveArticleSummaryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveArticleSummaryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArticleID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ArticleID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Title", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Content", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Summary", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Summary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ContentSummary", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ContentSummary.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Outline", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Outline)); err != nil {
		return err
	}
	for _, v := range p.Outline {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tags", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
		return err
	}
	for _, v := range p.Tags {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TradingProposal", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TradingProposal); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *SaveArticleSummaryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveArticleSummaryRequest(%+v)", *p)

}

func (p *SaveArticleSummaryRequest) DeepEqual(ano *SaveArticleSummaryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ArticleID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Title) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	if !p.Field4DeepEqual(ano.Summary) {
		return false
	}
	if !p.Field5DeepEqual(ano.ContentSummary) {
		return false
	}
	if !p.Field6DeepEqual(ano.Outline) {
		return false
	}
	if !p.Field7DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field8DeepEqual(ano.TradingProposal) {
		return false
	}
	return true
}

func (p *SaveArticleSummaryRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ArticleID, src) != 0 {
		return false
	}
	return true
}
func (p *SaveArticleSummaryRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *SaveArticleSummaryRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *SaveArticleSummaryRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Summary, src) != 0 {
		return false
	}
	return true
}
func (p *SaveArticleSummaryRequest) Field5DeepEqual(src *ArticleContentSummary) bool {

	if !p.ContentSummary.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SaveArticleSummaryRequest) Field6DeepEqual(src []*SummaryOutline) bool {

	if len(p.Outline) != len(src) {
		return false
	}
	for i, v := range p.Outline {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *SaveArticleSummaryRequest) Field7DeepEqual(src []string) bool {

	if len(p.Tags) != len(src) {
		return false
	}
	for i, v := range p.Tags {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SaveArticleSummaryRequest) Field8DeepEqual(src int32) bool {

	if p.TradingProposal != src {
		return false
	}
	return true
}

type SaveArticleSummaryResponse struct {
	ID string `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
}

func NewSaveArticleSummaryResponse() *SaveArticleSummaryResponse {
	return &SaveArticleSummaryResponse{}
}

func (p *SaveArticleSummaryResponse) InitDefault() {
	*p = SaveArticleSummaryResponse{}
}

func (p *SaveArticleSummaryResponse) GetID() (v string) {
	return p.ID
}
func (p *SaveArticleSummaryResponse) SetID(val string) {
	p.ID = val
}

var fieldIDToName_SaveArticleSummaryResponse = map[int16]string{
	1: "ID",
}

func (p *SaveArticleSummaryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SaveArticleSummaryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SaveArticleSummaryResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}

func (p *SaveArticleSummaryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveArticleSummaryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SaveArticleSummaryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SaveArticleSummaryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveArticleSummaryResponse(%+v)", *p)

}

func (p *SaveArticleSummaryResponse) DeepEqual(ano *SaveArticleSummaryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	return true
}

func (p *SaveArticleSummaryResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}

type ArticleSummaryListRequest struct {
	Limit  int32 `thrift:"Limit,1" frugal:"1,default,i32" json:"Limit"`
	Offset int32 `thrift:"Offset,2" frugal:"2,default,i32" json:"Offset"`
}

func NewArticleSummaryListRequest() *ArticleSummaryListRequest {
	return &ArticleSummaryListRequest{}
}

func (p *ArticleSummaryListRequest) InitDefault() {
	*p = ArticleSummaryListRequest{}
}

func (p *ArticleSummaryListRequest) GetLimit() (v int32) {
	return p.Limit
}

func (p *ArticleSummaryListRequest) GetOffset() (v int32) {
	return p.Offset
}
func (p *ArticleSummaryListRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ArticleSummaryListRequest) SetOffset(val int32) {
	p.Offset = val
}

var fieldIDToName_ArticleSummaryListRequest = map[int16]string{
	1: "Limit",
	2: "Offset",
}

func (p *ArticleSummaryListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleSummaryListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleSummaryListRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}
func (p *ArticleSummaryListRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *ArticleSummaryListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleSummaryListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleSummaryListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Limit", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleSummaryListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Offset", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArticleSummaryListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleSummaryListRequest(%+v)", *p)

}

func (p *ArticleSummaryListRequest) DeepEqual(ano *ArticleSummaryListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field2DeepEqual(ano.Offset) {
		return false
	}
	return true
}

func (p *ArticleSummaryListRequest) Field1DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ArticleSummaryListRequest) Field2DeepEqual(src int32) bool {

	if p.Offset != src {
		return false
	}
	return true
}

type ArticleSummary struct {
	ID              string                 `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
	Article         *Article               `thrift:"Article,2" frugal:"2,default,Article" json:"Article"`
	Title           string                 `thrift:"Title,3" frugal:"3,default,string" json:"Title"`
	Content         string                 `thrift:"Content,4" frugal:"4,default,string" json:"Content"`
	Summary         string                 `thrift:"Summary,5" frugal:"5,default,string" json:"Summary"`
	ContentSummary  *ArticleContentSummary `thrift:"ContentSummary,6" frugal:"6,default,ArticleContentSummary" json:"ContentSummary"`
	Outline         []*SummaryOutline      `thrift:"Outline,7" frugal:"7,default,list<SummaryOutline>" json:"Outline"`
	Tags            []string               `thrift:"tags,8" frugal:"8,default,list<string>" json:"tags"`
	CreatedAt       string                 `thrift:"CreatedAt,9" frugal:"9,default,string" json:"CreatedAt"`
	TradingProposal int32                  `thrift:"TradingProposal,10" frugal:"10,default,i32" json:"TradingProposal"`
}

func NewArticleSummary() *ArticleSummary {
	return &ArticleSummary{}
}

func (p *ArticleSummary) InitDefault() {
	*p = ArticleSummary{}
}

func (p *ArticleSummary) GetID() (v string) {
	return p.ID
}

var ArticleSummary_Article_DEFAULT *Article

func (p *ArticleSummary) GetArticle() (v *Article) {
	if !p.IsSetArticle() {
		return ArticleSummary_Article_DEFAULT
	}
	return p.Article
}

func (p *ArticleSummary) GetTitle() (v string) {
	return p.Title
}

func (p *ArticleSummary) GetContent() (v string) {
	return p.Content
}

func (p *ArticleSummary) GetSummary() (v string) {
	return p.Summary
}

var ArticleSummary_ContentSummary_DEFAULT *ArticleContentSummary

func (p *ArticleSummary) GetContentSummary() (v *ArticleContentSummary) {
	if !p.IsSetContentSummary() {
		return ArticleSummary_ContentSummary_DEFAULT
	}
	return p.ContentSummary
}

func (p *ArticleSummary) GetOutline() (v []*SummaryOutline) {
	return p.Outline
}

func (p *ArticleSummary) GetTags() (v []string) {
	return p.Tags
}

func (p *ArticleSummary) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *ArticleSummary) GetTradingProposal() (v int32) {
	return p.TradingProposal
}
func (p *ArticleSummary) SetID(val string) {
	p.ID = val
}
func (p *ArticleSummary) SetArticle(val *Article) {
	p.Article = val
}
func (p *ArticleSummary) SetTitle(val string) {
	p.Title = val
}
func (p *ArticleSummary) SetContent(val string) {
	p.Content = val
}
func (p *ArticleSummary) SetSummary(val string) {
	p.Summary = val
}
func (p *ArticleSummary) SetContentSummary(val *ArticleContentSummary) {
	p.ContentSummary = val
}
func (p *ArticleSummary) SetOutline(val []*SummaryOutline) {
	p.Outline = val
}
func (p *ArticleSummary) SetTags(val []string) {
	p.Tags = val
}
func (p *ArticleSummary) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *ArticleSummary) SetTradingProposal(val int32) {
	p.TradingProposal = val
}

var fieldIDToName_ArticleSummary = map[int16]string{
	1:  "ID",
	2:  "Article",
	3:  "Title",
	4:  "Content",
	5:  "Summary",
	6:  "ContentSummary",
	7:  "Outline",
	8:  "tags",
	9:  "CreatedAt",
	10: "TradingProposal",
}

func (p *ArticleSummary) IsSetArticle() bool {
	return p.Article != nil
}

func (p *ArticleSummary) IsSetContentSummary() bool {
	return p.ContentSummary != nil
}

func (p *ArticleSummary) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleSummary[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleSummary) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}
func (p *ArticleSummary) ReadField2(iprot thrift.TProtocol) error {
	p.Article = NewArticle()
	if err := p.Article.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ArticleSummary) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *ArticleSummary) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}
func (p *ArticleSummary) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Summary = v
	}
	return nil
}
func (p *ArticleSummary) ReadField6(iprot thrift.TProtocol) error {
	p.ContentSummary = NewArticleContentSummary()
	if err := p.ContentSummary.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ArticleSummary) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Outline = make([]*SummaryOutline, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSummaryOutline()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Outline = append(p.Outline, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ArticleSummary) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tags = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Tags = append(p.Tags, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ArticleSummary) ReadField9(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}
func (p *ArticleSummary) ReadField10(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TradingProposal = v
	}
	return nil
}

func (p *ArticleSummary) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleSummary"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleSummary) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleSummary) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Article", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Article.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArticleSummary) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Title", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ArticleSummary) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Content", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ArticleSummary) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Summary", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Summary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ArticleSummary) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ContentSummary", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ContentSummary.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ArticleSummary) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Outline", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Outline)); err != nil {
		return err
	}
	for _, v := range p.Outline {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ArticleSummary) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tags", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
		return err
	}
	for _, v := range p.Tags {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ArticleSummary) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ArticleSummary) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TradingProposal", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TradingProposal); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ArticleSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleSummary(%+v)", *p)

}

func (p *ArticleSummary) DeepEqual(ano *ArticleSummary) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Article) {
		return false
	}
	if !p.Field3DeepEqual(ano.Title) {
		return false
	}
	if !p.Field4DeepEqual(ano.Content) {
		return false
	}
	if !p.Field5DeepEqual(ano.Summary) {
		return false
	}
	if !p.Field6DeepEqual(ano.ContentSummary) {
		return false
	}
	if !p.Field7DeepEqual(ano.Outline) {
		return false
	}
	if !p.Field8DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.TradingProposal) {
		return false
	}
	return true
}

func (p *ArticleSummary) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleSummary) Field2DeepEqual(src *Article) bool {

	if !p.Article.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ArticleSummary) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleSummary) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleSummary) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Summary, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleSummary) Field6DeepEqual(src *ArticleContentSummary) bool {

	if !p.ContentSummary.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ArticleSummary) Field7DeepEqual(src []*SummaryOutline) bool {

	if len(p.Outline) != len(src) {
		return false
	}
	for i, v := range p.Outline {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ArticleSummary) Field8DeepEqual(src []string) bool {

	if len(p.Tags) != len(src) {
		return false
	}
	for i, v := range p.Tags {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ArticleSummary) Field9DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleSummary) Field10DeepEqual(src int32) bool {

	if p.TradingProposal != src {
		return false
	}
	return true
}

type ArticleContentSummary struct {
	Original    string `thrift:"Original,1" frugal:"1,default,string" json:"Original"`
	Translation string `thrift:"Translation,2" frugal:"2,default,string" json:"Translation"`
}

func NewArticleContentSummary() *ArticleContentSummary {
	return &ArticleContentSummary{}
}

func (p *ArticleContentSummary) InitDefault() {
	*p = ArticleContentSummary{}
}

func (p *ArticleContentSummary) GetOriginal() (v string) {
	return p.Original
}

func (p *ArticleContentSummary) GetTranslation() (v string) {
	return p.Translation
}
func (p *ArticleContentSummary) SetOriginal(val string) {
	p.Original = val
}
func (p *ArticleContentSummary) SetTranslation(val string) {
	p.Translation = val
}

var fieldIDToName_ArticleContentSummary = map[int16]string{
	1: "Original",
	2: "Translation",
}

func (p *ArticleContentSummary) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleContentSummary[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleContentSummary) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Original = v
	}
	return nil
}
func (p *ArticleContentSummary) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Translation = v
	}
	return nil
}

func (p *ArticleContentSummary) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleContentSummary"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleContentSummary) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Original", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Original); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleContentSummary) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Translation", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Translation); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArticleContentSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleContentSummary(%+v)", *p)

}

func (p *ArticleContentSummary) DeepEqual(ano *ArticleContentSummary) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Original) {
		return false
	}
	if !p.Field2DeepEqual(ano.Translation) {
		return false
	}
	return true
}

func (p *ArticleContentSummary) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Original, src) != 0 {
		return false
	}
	return true
}
func (p *ArticleContentSummary) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Translation, src) != 0 {
		return false
	}
	return true
}

type SummaryOutline struct {
	Title   string `thrift:"Title,1" frugal:"1,default,string" json:"Title"`
	Content string `thrift:"Content,2" frugal:"2,default,string" json:"Content"`
}

func NewSummaryOutline() *SummaryOutline {
	return &SummaryOutline{}
}

func (p *SummaryOutline) InitDefault() {
	*p = SummaryOutline{}
}

func (p *SummaryOutline) GetTitle() (v string) {
	return p.Title
}

func (p *SummaryOutline) GetContent() (v string) {
	return p.Content
}
func (p *SummaryOutline) SetTitle(val string) {
	p.Title = val
}
func (p *SummaryOutline) SetContent(val string) {
	p.Content = val
}

var fieldIDToName_SummaryOutline = map[int16]string{
	1: "Title",
	2: "Content",
}

func (p *SummaryOutline) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SummaryOutline[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SummaryOutline) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *SummaryOutline) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}

func (p *SummaryOutline) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SummaryOutline"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SummaryOutline) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Title", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SummaryOutline) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Content", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SummaryOutline) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SummaryOutline(%+v)", *p)

}

func (p *SummaryOutline) DeepEqual(ano *SummaryOutline) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Title) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *SummaryOutline) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *SummaryOutline) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

type ArticleSummaryListResponse struct {
	ArticleSummaryList []*ArticleSummary `thrift:"ArticleSummaryList,1" frugal:"1,default,list<ArticleSummary>" json:"ArticleSummaryList"`
}

func NewArticleSummaryListResponse() *ArticleSummaryListResponse {
	return &ArticleSummaryListResponse{}
}

func (p *ArticleSummaryListResponse) InitDefault() {
	*p = ArticleSummaryListResponse{}
}

func (p *ArticleSummaryListResponse) GetArticleSummaryList() (v []*ArticleSummary) {
	return p.ArticleSummaryList
}
func (p *ArticleSummaryListResponse) SetArticleSummaryList(val []*ArticleSummary) {
	p.ArticleSummaryList = val
}

var fieldIDToName_ArticleSummaryListResponse = map[int16]string{
	1: "ArticleSummaryList",
}

func (p *ArticleSummaryListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleSummaryListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleSummaryListResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ArticleSummaryList = make([]*ArticleSummary, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewArticleSummary()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ArticleSummaryList = append(p.ArticleSummaryList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ArticleSummaryListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleSummaryListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleSummaryListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArticleSummaryList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArticleSummaryList)); err != nil {
		return err
	}
	for _, v := range p.ArticleSummaryList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleSummaryListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleSummaryListResponse(%+v)", *p)

}

func (p *ArticleSummaryListResponse) DeepEqual(ano *ArticleSummaryListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ArticleSummaryList) {
		return false
	}
	return true
}

func (p *ArticleSummaryListResponse) Field1DeepEqual(src []*ArticleSummary) bool {

	if len(p.ArticleSummaryList) != len(src) {
		return false
	}
	for i, v := range p.ArticleSummaryList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ArticleCountRequest struct {
	Status      int32    `thrift:"Status,1" frugal:"1,default,i32" json:"Status"`
	SiteIdList  []string `thrift:"SiteIdList,2" frugal:"2,default,list<string>" json:"SiteIdList"`
	ArticleType string   `thrift:"ArticleType,3" frugal:"3,default,string" json:"ArticleType"`
}

func NewArticleCountRequest() *ArticleCountRequest {
	return &ArticleCountRequest{}
}

func (p *ArticleCountRequest) InitDefault() {
	*p = ArticleCountRequest{}
}

func (p *ArticleCountRequest) GetStatus() (v int32) {
	return p.Status
}

func (p *ArticleCountRequest) GetSiteIdList() (v []string) {
	return p.SiteIdList
}

func (p *ArticleCountRequest) GetArticleType() (v string) {
	return p.ArticleType
}
func (p *ArticleCountRequest) SetStatus(val int32) {
	p.Status = val
}
func (p *ArticleCountRequest) SetSiteIdList(val []string) {
	p.SiteIdList = val
}
func (p *ArticleCountRequest) SetArticleType(val string) {
	p.ArticleType = val
}

var fieldIDToName_ArticleCountRequest = map[int16]string{
	1: "Status",
	2: "SiteIdList",
	3: "ArticleType",
}

func (p *ArticleCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleCountRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}
func (p *ArticleCountRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SiteIdList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SiteIdList = append(p.SiteIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *ArticleCountRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ArticleType = v
	}
	return nil
}

func (p *ArticleCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleCountRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SiteIdList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SiteIdList)); err != nil {
		return err
	}
	for _, v := range p.SiteIdList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArticleCountRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArticleType", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ArticleType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ArticleCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleCountRequest(%+v)", *p)

}

func (p *ArticleCountRequest) DeepEqual(ano *ArticleCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.SiteIdList) {
		return false
	}
	if !p.Field3DeepEqual(ano.ArticleType) {
		return false
	}
	return true
}

func (p *ArticleCountRequest) Field1DeepEqual(src int32) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ArticleCountRequest) Field2DeepEqual(src []string) bool {

	if len(p.SiteIdList) != len(src) {
		return false
	}
	for i, v := range p.SiteIdList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ArticleCountRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ArticleType, src) != 0 {
		return false
	}
	return true
}

type ArticleCountResponse struct {
	Count int32 `thrift:"Count,1" frugal:"1,default,i32" json:"Count"`
}

func NewArticleCountResponse() *ArticleCountResponse {
	return &ArticleCountResponse{}
}

func (p *ArticleCountResponse) InitDefault() {
	*p = ArticleCountResponse{}
}

func (p *ArticleCountResponse) GetCount() (v int32) {
	return p.Count
}
func (p *ArticleCountResponse) SetCount(val int32) {
	p.Count = val
}

var fieldIDToName_ArticleCountResponse = map[int16]string{
	1: "Count",
}

func (p *ArticleCountResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleCountResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleCountResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ArticleCountResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleCountResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleCountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Count", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleCountResponse(%+v)", *p)

}

func (p *ArticleCountResponse) DeepEqual(ano *ArticleCountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ArticleCountResponse) Field1DeepEqual(src int32) bool {

	if p.Count != src {
		return false
	}
	return true
}

type ArticleSummaryCountRequest struct {
}

func NewArticleSummaryCountRequest() *ArticleSummaryCountRequest {
	return &ArticleSummaryCountRequest{}
}

func (p *ArticleSummaryCountRequest) InitDefault() {
	*p = ArticleSummaryCountRequest{}
}

var fieldIDToName_ArticleSummaryCountRequest = map[int16]string{}

func (p *ArticleSummaryCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleSummaryCountRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ArticleSummaryCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleSummaryCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleSummaryCountRequest(%+v)", *p)

}

func (p *ArticleSummaryCountRequest) DeepEqual(ano *ArticleSummaryCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ArticleSummaryCountResponse struct {
	Count int32 `thrift:"Count,1" frugal:"1,default,i32" json:"Count"`
}

func NewArticleSummaryCountResponse() *ArticleSummaryCountResponse {
	return &ArticleSummaryCountResponse{}
}

func (p *ArticleSummaryCountResponse) InitDefault() {
	*p = ArticleSummaryCountResponse{}
}

func (p *ArticleSummaryCountResponse) GetCount() (v int32) {
	return p.Count
}
func (p *ArticleSummaryCountResponse) SetCount(val int32) {
	p.Count = val
}

var fieldIDToName_ArticleSummaryCountResponse = map[int16]string{
	1: "Count",
}

func (p *ArticleSummaryCountResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleSummaryCountResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleSummaryCountResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ArticleSummaryCountResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleSummaryCountResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleSummaryCountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Count", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleSummaryCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleSummaryCountResponse(%+v)", *p)

}

func (p *ArticleSummaryCountResponse) DeepEqual(ano *ArticleSummaryCountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ArticleSummaryCountResponse) Field1DeepEqual(src int32) bool {

	if p.Count != src {
		return false
	}
	return true
}

type SpeedyRead interface {
	Echo(ctx context.Context, req *Request) (r *Response, err error)

	GetSiteInfo(ctx context.Context, req *GetSiteRequest) (r *GetSiteResponse, err error)

	CreateSiteInfo(ctx context.Context, req *CreateSiteRequest) (r *CreateSiteResponse, err error)

	ArticleList(ctx context.Context, req *GetArticleListRequest) (r *GetArticleListResponse, err error)

	CreateArticle(ctx context.Context, req *CreateArticleRequest) (r *CreateArticleResponse, err error)

	RejectArticle(ctx context.Context, req *RejectArticleRequest) (r *RejectArticleResponse, err error)

	ArticleCount(ctx context.Context, req *ArticleCountRequest) (r *ArticleCountResponse, err error)

	SaveArticleSummary(ctx context.Context, req *SaveArticleSummaryRequest) (r *SaveArticleSummaryResponse, err error)

	GetArticleSummaryList(ctx context.Context, req *ArticleSummaryListRequest) (r *ArticleSummaryListResponse, err error)

	ArticleSummaryCount(ctx context.Context, req *ArticleSummaryCountRequest) (r *ArticleSummaryCountResponse, err error)
}

type SpeedyReadClient struct {
	c thrift.TClient
}

func NewSpeedyReadClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SpeedyReadClient {
	return &SpeedyReadClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSpeedyReadClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SpeedyReadClient {
	return &SpeedyReadClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSpeedyReadClient(c thrift.TClient) *SpeedyReadClient {
	return &SpeedyReadClient{
		c: c,
	}
}

func (p *SpeedyReadClient) Client_() thrift.TClient {
	return p.c
}

func (p *SpeedyReadClient) Echo(ctx context.Context, req *Request) (r *Response, err error) {
	var _args SpeedyReadEchoArgs
	_args.Req = req
	var _result SpeedyReadEchoResult
	if err = p.Client_().Call(ctx, "echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) GetSiteInfo(ctx context.Context, req *GetSiteRequest) (r *GetSiteResponse, err error) {
	var _args SpeedyReadGetSiteInfoArgs
	_args.Req = req
	var _result SpeedyReadGetSiteInfoResult
	if err = p.Client_().Call(ctx, "GetSiteInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) CreateSiteInfo(ctx context.Context, req *CreateSiteRequest) (r *CreateSiteResponse, err error) {
	var _args SpeedyReadCreateSiteInfoArgs
	_args.Req = req
	var _result SpeedyReadCreateSiteInfoResult
	if err = p.Client_().Call(ctx, "CreateSiteInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) ArticleList(ctx context.Context, req *GetArticleListRequest) (r *GetArticleListResponse, err error) {
	var _args SpeedyReadArticleListArgs
	_args.Req = req
	var _result SpeedyReadArticleListResult
	if err = p.Client_().Call(ctx, "ArticleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) CreateArticle(ctx context.Context, req *CreateArticleRequest) (r *CreateArticleResponse, err error) {
	var _args SpeedyReadCreateArticleArgs
	_args.Req = req
	var _result SpeedyReadCreateArticleResult
	if err = p.Client_().Call(ctx, "CreateArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) RejectArticle(ctx context.Context, req *RejectArticleRequest) (r *RejectArticleResponse, err error) {
	var _args SpeedyReadRejectArticleArgs
	_args.Req = req
	var _result SpeedyReadRejectArticleResult
	if err = p.Client_().Call(ctx, "RejectArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) ArticleCount(ctx context.Context, req *ArticleCountRequest) (r *ArticleCountResponse, err error) {
	var _args SpeedyReadArticleCountArgs
	_args.Req = req
	var _result SpeedyReadArticleCountResult
	if err = p.Client_().Call(ctx, "ArticleCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) SaveArticleSummary(ctx context.Context, req *SaveArticleSummaryRequest) (r *SaveArticleSummaryResponse, err error) {
	var _args SpeedyReadSaveArticleSummaryArgs
	_args.Req = req
	var _result SpeedyReadSaveArticleSummaryResult
	if err = p.Client_().Call(ctx, "SaveArticleSummary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) GetArticleSummaryList(ctx context.Context, req *ArticleSummaryListRequest) (r *ArticleSummaryListResponse, err error) {
	var _args SpeedyReadGetArticleSummaryListArgs
	_args.Req = req
	var _result SpeedyReadGetArticleSummaryListResult
	if err = p.Client_().Call(ctx, "GetArticleSummaryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SpeedyReadClient) ArticleSummaryCount(ctx context.Context, req *ArticleSummaryCountRequest) (r *ArticleSummaryCountResponse, err error) {
	var _args SpeedyReadArticleSummaryCountArgs
	_args.Req = req
	var _result SpeedyReadArticleSummaryCountResult
	if err = p.Client_().Call(ctx, "ArticleSummaryCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type SpeedyReadProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SpeedyRead
}

func (p *SpeedyReadProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SpeedyReadProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SpeedyReadProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSpeedyReadProcessor(handler SpeedyRead) *SpeedyReadProcessor {
	self := &SpeedyReadProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("echo", &speedyReadProcessorEcho{handler: handler})
	self.AddToProcessorMap("GetSiteInfo", &speedyReadProcessorGetSiteInfo{handler: handler})
	self.AddToProcessorMap("CreateSiteInfo", &speedyReadProcessorCreateSiteInfo{handler: handler})
	self.AddToProcessorMap("ArticleList", &speedyReadProcessorArticleList{handler: handler})
	self.AddToProcessorMap("CreateArticle", &speedyReadProcessorCreateArticle{handler: handler})
	self.AddToProcessorMap("RejectArticle", &speedyReadProcessorRejectArticle{handler: handler})
	self.AddToProcessorMap("ArticleCount", &speedyReadProcessorArticleCount{handler: handler})
	self.AddToProcessorMap("SaveArticleSummary", &speedyReadProcessorSaveArticleSummary{handler: handler})
	self.AddToProcessorMap("GetArticleSummaryList", &speedyReadProcessorGetArticleSummaryList{handler: handler})
	self.AddToProcessorMap("ArticleSummaryCount", &speedyReadProcessorArticleSummaryCount{handler: handler})
	return self
}
func (p *SpeedyReadProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type speedyReadProcessorEcho struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorEcho) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadEchoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("echo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadEchoResult{}
	var retval *Response
	if retval, err2 = p.handler.Echo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echo: "+err2.Error())
		oprot.WriteMessageBegin("echo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("echo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorGetSiteInfo struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorGetSiteInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadGetSiteInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSiteInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadGetSiteInfoResult{}
	var retval *GetSiteResponse
	if retval, err2 = p.handler.GetSiteInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSiteInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetSiteInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSiteInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorCreateSiteInfo struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorCreateSiteInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadCreateSiteInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateSiteInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadCreateSiteInfoResult{}
	var retval *CreateSiteResponse
	if retval, err2 = p.handler.CreateSiteInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateSiteInfo: "+err2.Error())
		oprot.WriteMessageBegin("CreateSiteInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateSiteInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorArticleList struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorArticleList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadArticleListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ArticleList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadArticleListResult{}
	var retval *GetArticleListResponse
	if retval, err2 = p.handler.ArticleList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ArticleList: "+err2.Error())
		oprot.WriteMessageBegin("ArticleList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ArticleList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorCreateArticle struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorCreateArticle) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadCreateArticleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateArticle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadCreateArticleResult{}
	var retval *CreateArticleResponse
	if retval, err2 = p.handler.CreateArticle(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateArticle: "+err2.Error())
		oprot.WriteMessageBegin("CreateArticle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateArticle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorRejectArticle struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorRejectArticle) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadRejectArticleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RejectArticle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadRejectArticleResult{}
	var retval *RejectArticleResponse
	if retval, err2 = p.handler.RejectArticle(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RejectArticle: "+err2.Error())
		oprot.WriteMessageBegin("RejectArticle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RejectArticle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorArticleCount struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorArticleCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadArticleCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ArticleCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadArticleCountResult{}
	var retval *ArticleCountResponse
	if retval, err2 = p.handler.ArticleCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ArticleCount: "+err2.Error())
		oprot.WriteMessageBegin("ArticleCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ArticleCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorSaveArticleSummary struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorSaveArticleSummary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadSaveArticleSummaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SaveArticleSummary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadSaveArticleSummaryResult{}
	var retval *SaveArticleSummaryResponse
	if retval, err2 = p.handler.SaveArticleSummary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveArticleSummary: "+err2.Error())
		oprot.WriteMessageBegin("SaveArticleSummary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SaveArticleSummary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorGetArticleSummaryList struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorGetArticleSummaryList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadGetArticleSummaryListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetArticleSummaryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadGetArticleSummaryListResult{}
	var retval *ArticleSummaryListResponse
	if retval, err2 = p.handler.GetArticleSummaryList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetArticleSummaryList: "+err2.Error())
		oprot.WriteMessageBegin("GetArticleSummaryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetArticleSummaryList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type speedyReadProcessorArticleSummaryCount struct {
	handler SpeedyRead
}

func (p *speedyReadProcessorArticleSummaryCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SpeedyReadArticleSummaryCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ArticleSummaryCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SpeedyReadArticleSummaryCountResult{}
	var retval *ArticleSummaryCountResponse
	if retval, err2 = p.handler.ArticleSummaryCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ArticleSummaryCount: "+err2.Error())
		oprot.WriteMessageBegin("ArticleSummaryCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ArticleSummaryCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type SpeedyReadEchoArgs struct {
	Req *Request `thrift:"req,1" frugal:"1,default,Request" json:"req"`
}

func NewSpeedyReadEchoArgs() *SpeedyReadEchoArgs {
	return &SpeedyReadEchoArgs{}
}

func (p *SpeedyReadEchoArgs) InitDefault() {
	*p = SpeedyReadEchoArgs{}
}

var SpeedyReadEchoArgs_Req_DEFAULT *Request

func (p *SpeedyReadEchoArgs) GetReq() (v *Request) {
	if !p.IsSetReq() {
		return SpeedyReadEchoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadEchoArgs) SetReq(val *Request) {
	p.Req = val
}

var fieldIDToName_SpeedyReadEchoArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadEchoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadEchoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadEchoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadEchoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadEchoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("echo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadEchoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadEchoArgs(%+v)", *p)

}

func (p *SpeedyReadEchoArgs) DeepEqual(ano *SpeedyReadEchoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadEchoArgs) Field1DeepEqual(src *Request) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadEchoResult struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewSpeedyReadEchoResult() *SpeedyReadEchoResult {
	return &SpeedyReadEchoResult{}
}

func (p *SpeedyReadEchoResult) InitDefault() {
	*p = SpeedyReadEchoResult{}
}

var SpeedyReadEchoResult_Success_DEFAULT *Response

func (p *SpeedyReadEchoResult) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return SpeedyReadEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadEchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

var fieldIDToName_SpeedyReadEchoResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadEchoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadEchoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadEchoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadEchoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("echo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadEchoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadEchoResult(%+v)", *p)

}

func (p *SpeedyReadEchoResult) DeepEqual(ano *SpeedyReadEchoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadEchoResult) Field0DeepEqual(src *Response) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadGetSiteInfoArgs struct {
	Req *GetSiteRequest `thrift:"req,1" frugal:"1,default,GetSiteRequest" json:"req"`
}

func NewSpeedyReadGetSiteInfoArgs() *SpeedyReadGetSiteInfoArgs {
	return &SpeedyReadGetSiteInfoArgs{}
}

func (p *SpeedyReadGetSiteInfoArgs) InitDefault() {
	*p = SpeedyReadGetSiteInfoArgs{}
}

var SpeedyReadGetSiteInfoArgs_Req_DEFAULT *GetSiteRequest

func (p *SpeedyReadGetSiteInfoArgs) GetReq() (v *GetSiteRequest) {
	if !p.IsSetReq() {
		return SpeedyReadGetSiteInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadGetSiteInfoArgs) SetReq(val *GetSiteRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadGetSiteInfoArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadGetSiteInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadGetSiteInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadGetSiteInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadGetSiteInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetSiteRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadGetSiteInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSiteInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadGetSiteInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadGetSiteInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadGetSiteInfoArgs(%+v)", *p)

}

func (p *SpeedyReadGetSiteInfoArgs) DeepEqual(ano *SpeedyReadGetSiteInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadGetSiteInfoArgs) Field1DeepEqual(src *GetSiteRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadGetSiteInfoResult struct {
	Success *GetSiteResponse `thrift:"success,0,optional" frugal:"0,optional,GetSiteResponse" json:"success,omitempty"`
}

func NewSpeedyReadGetSiteInfoResult() *SpeedyReadGetSiteInfoResult {
	return &SpeedyReadGetSiteInfoResult{}
}

func (p *SpeedyReadGetSiteInfoResult) InitDefault() {
	*p = SpeedyReadGetSiteInfoResult{}
}

var SpeedyReadGetSiteInfoResult_Success_DEFAULT *GetSiteResponse

func (p *SpeedyReadGetSiteInfoResult) GetSuccess() (v *GetSiteResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadGetSiteInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadGetSiteInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSiteResponse)
}

var fieldIDToName_SpeedyReadGetSiteInfoResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadGetSiteInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadGetSiteInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadGetSiteInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadGetSiteInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetSiteResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadGetSiteInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSiteInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadGetSiteInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadGetSiteInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadGetSiteInfoResult(%+v)", *p)

}

func (p *SpeedyReadGetSiteInfoResult) DeepEqual(ano *SpeedyReadGetSiteInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadGetSiteInfoResult) Field0DeepEqual(src *GetSiteResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadCreateSiteInfoArgs struct {
	Req *CreateSiteRequest `thrift:"req,1" frugal:"1,default,CreateSiteRequest" json:"req"`
}

func NewSpeedyReadCreateSiteInfoArgs() *SpeedyReadCreateSiteInfoArgs {
	return &SpeedyReadCreateSiteInfoArgs{}
}

func (p *SpeedyReadCreateSiteInfoArgs) InitDefault() {
	*p = SpeedyReadCreateSiteInfoArgs{}
}

var SpeedyReadCreateSiteInfoArgs_Req_DEFAULT *CreateSiteRequest

func (p *SpeedyReadCreateSiteInfoArgs) GetReq() (v *CreateSiteRequest) {
	if !p.IsSetReq() {
		return SpeedyReadCreateSiteInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadCreateSiteInfoArgs) SetReq(val *CreateSiteRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadCreateSiteInfoArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadCreateSiteInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadCreateSiteInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadCreateSiteInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadCreateSiteInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateSiteRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadCreateSiteInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSiteInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadCreateSiteInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadCreateSiteInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadCreateSiteInfoArgs(%+v)", *p)

}

func (p *SpeedyReadCreateSiteInfoArgs) DeepEqual(ano *SpeedyReadCreateSiteInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadCreateSiteInfoArgs) Field1DeepEqual(src *CreateSiteRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadCreateSiteInfoResult struct {
	Success *CreateSiteResponse `thrift:"success,0,optional" frugal:"0,optional,CreateSiteResponse" json:"success,omitempty"`
}

func NewSpeedyReadCreateSiteInfoResult() *SpeedyReadCreateSiteInfoResult {
	return &SpeedyReadCreateSiteInfoResult{}
}

func (p *SpeedyReadCreateSiteInfoResult) InitDefault() {
	*p = SpeedyReadCreateSiteInfoResult{}
}

var SpeedyReadCreateSiteInfoResult_Success_DEFAULT *CreateSiteResponse

func (p *SpeedyReadCreateSiteInfoResult) GetSuccess() (v *CreateSiteResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadCreateSiteInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadCreateSiteInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateSiteResponse)
}

var fieldIDToName_SpeedyReadCreateSiteInfoResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadCreateSiteInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadCreateSiteInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadCreateSiteInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadCreateSiteInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateSiteResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadCreateSiteInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSiteInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadCreateSiteInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadCreateSiteInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadCreateSiteInfoResult(%+v)", *p)

}

func (p *SpeedyReadCreateSiteInfoResult) DeepEqual(ano *SpeedyReadCreateSiteInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadCreateSiteInfoResult) Field0DeepEqual(src *CreateSiteResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadArticleListArgs struct {
	Req *GetArticleListRequest `thrift:"req,1" frugal:"1,default,GetArticleListRequest" json:"req"`
}

func NewSpeedyReadArticleListArgs() *SpeedyReadArticleListArgs {
	return &SpeedyReadArticleListArgs{}
}

func (p *SpeedyReadArticleListArgs) InitDefault() {
	*p = SpeedyReadArticleListArgs{}
}

var SpeedyReadArticleListArgs_Req_DEFAULT *GetArticleListRequest

func (p *SpeedyReadArticleListArgs) GetReq() (v *GetArticleListRequest) {
	if !p.IsSetReq() {
		return SpeedyReadArticleListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadArticleListArgs) SetReq(val *GetArticleListRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadArticleListArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadArticleListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadArticleListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadArticleListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadArticleListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetArticleListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadArticleListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadArticleListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadArticleListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadArticleListArgs(%+v)", *p)

}

func (p *SpeedyReadArticleListArgs) DeepEqual(ano *SpeedyReadArticleListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadArticleListArgs) Field1DeepEqual(src *GetArticleListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadArticleListResult struct {
	Success *GetArticleListResponse `thrift:"success,0,optional" frugal:"0,optional,GetArticleListResponse" json:"success,omitempty"`
}

func NewSpeedyReadArticleListResult() *SpeedyReadArticleListResult {
	return &SpeedyReadArticleListResult{}
}

func (p *SpeedyReadArticleListResult) InitDefault() {
	*p = SpeedyReadArticleListResult{}
}

var SpeedyReadArticleListResult_Success_DEFAULT *GetArticleListResponse

func (p *SpeedyReadArticleListResult) GetSuccess() (v *GetArticleListResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadArticleListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadArticleListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetArticleListResponse)
}

var fieldIDToName_SpeedyReadArticleListResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadArticleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadArticleListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadArticleListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadArticleListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetArticleListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadArticleListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadArticleListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadArticleListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadArticleListResult(%+v)", *p)

}

func (p *SpeedyReadArticleListResult) DeepEqual(ano *SpeedyReadArticleListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadArticleListResult) Field0DeepEqual(src *GetArticleListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadCreateArticleArgs struct {
	Req *CreateArticleRequest `thrift:"req,1" frugal:"1,default,CreateArticleRequest" json:"req"`
}

func NewSpeedyReadCreateArticleArgs() *SpeedyReadCreateArticleArgs {
	return &SpeedyReadCreateArticleArgs{}
}

func (p *SpeedyReadCreateArticleArgs) InitDefault() {
	*p = SpeedyReadCreateArticleArgs{}
}

var SpeedyReadCreateArticleArgs_Req_DEFAULT *CreateArticleRequest

func (p *SpeedyReadCreateArticleArgs) GetReq() (v *CreateArticleRequest) {
	if !p.IsSetReq() {
		return SpeedyReadCreateArticleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadCreateArticleArgs) SetReq(val *CreateArticleRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadCreateArticleArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadCreateArticleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadCreateArticleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadCreateArticleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadCreateArticleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateArticleRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadCreateArticleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateArticle_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadCreateArticleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadCreateArticleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadCreateArticleArgs(%+v)", *p)

}

func (p *SpeedyReadCreateArticleArgs) DeepEqual(ano *SpeedyReadCreateArticleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadCreateArticleArgs) Field1DeepEqual(src *CreateArticleRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadCreateArticleResult struct {
	Success *CreateArticleResponse `thrift:"success,0,optional" frugal:"0,optional,CreateArticleResponse" json:"success,omitempty"`
}

func NewSpeedyReadCreateArticleResult() *SpeedyReadCreateArticleResult {
	return &SpeedyReadCreateArticleResult{}
}

func (p *SpeedyReadCreateArticleResult) InitDefault() {
	*p = SpeedyReadCreateArticleResult{}
}

var SpeedyReadCreateArticleResult_Success_DEFAULT *CreateArticleResponse

func (p *SpeedyReadCreateArticleResult) GetSuccess() (v *CreateArticleResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadCreateArticleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadCreateArticleResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateArticleResponse)
}

var fieldIDToName_SpeedyReadCreateArticleResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadCreateArticleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadCreateArticleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadCreateArticleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadCreateArticleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateArticleResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadCreateArticleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateArticle_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadCreateArticleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadCreateArticleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadCreateArticleResult(%+v)", *p)

}

func (p *SpeedyReadCreateArticleResult) DeepEqual(ano *SpeedyReadCreateArticleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadCreateArticleResult) Field0DeepEqual(src *CreateArticleResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadRejectArticleArgs struct {
	Req *RejectArticleRequest `thrift:"req,1" frugal:"1,default,RejectArticleRequest" json:"req"`
}

func NewSpeedyReadRejectArticleArgs() *SpeedyReadRejectArticleArgs {
	return &SpeedyReadRejectArticleArgs{}
}

func (p *SpeedyReadRejectArticleArgs) InitDefault() {
	*p = SpeedyReadRejectArticleArgs{}
}

var SpeedyReadRejectArticleArgs_Req_DEFAULT *RejectArticleRequest

func (p *SpeedyReadRejectArticleArgs) GetReq() (v *RejectArticleRequest) {
	if !p.IsSetReq() {
		return SpeedyReadRejectArticleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadRejectArticleArgs) SetReq(val *RejectArticleRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadRejectArticleArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadRejectArticleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadRejectArticleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadRejectArticleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadRejectArticleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRejectArticleRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadRejectArticleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RejectArticle_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadRejectArticleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadRejectArticleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadRejectArticleArgs(%+v)", *p)

}

func (p *SpeedyReadRejectArticleArgs) DeepEqual(ano *SpeedyReadRejectArticleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadRejectArticleArgs) Field1DeepEqual(src *RejectArticleRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadRejectArticleResult struct {
	Success *RejectArticleResponse `thrift:"success,0,optional" frugal:"0,optional,RejectArticleResponse" json:"success,omitempty"`
}

func NewSpeedyReadRejectArticleResult() *SpeedyReadRejectArticleResult {
	return &SpeedyReadRejectArticleResult{}
}

func (p *SpeedyReadRejectArticleResult) InitDefault() {
	*p = SpeedyReadRejectArticleResult{}
}

var SpeedyReadRejectArticleResult_Success_DEFAULT *RejectArticleResponse

func (p *SpeedyReadRejectArticleResult) GetSuccess() (v *RejectArticleResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadRejectArticleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadRejectArticleResult) SetSuccess(x interface{}) {
	p.Success = x.(*RejectArticleResponse)
}

var fieldIDToName_SpeedyReadRejectArticleResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadRejectArticleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadRejectArticleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadRejectArticleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadRejectArticleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRejectArticleResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadRejectArticleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RejectArticle_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadRejectArticleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadRejectArticleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadRejectArticleResult(%+v)", *p)

}

func (p *SpeedyReadRejectArticleResult) DeepEqual(ano *SpeedyReadRejectArticleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadRejectArticleResult) Field0DeepEqual(src *RejectArticleResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadArticleCountArgs struct {
	Req *ArticleCountRequest `thrift:"req,1" frugal:"1,default,ArticleCountRequest" json:"req"`
}

func NewSpeedyReadArticleCountArgs() *SpeedyReadArticleCountArgs {
	return &SpeedyReadArticleCountArgs{}
}

func (p *SpeedyReadArticleCountArgs) InitDefault() {
	*p = SpeedyReadArticleCountArgs{}
}

var SpeedyReadArticleCountArgs_Req_DEFAULT *ArticleCountRequest

func (p *SpeedyReadArticleCountArgs) GetReq() (v *ArticleCountRequest) {
	if !p.IsSetReq() {
		return SpeedyReadArticleCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadArticleCountArgs) SetReq(val *ArticleCountRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadArticleCountArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadArticleCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadArticleCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadArticleCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadArticleCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewArticleCountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadArticleCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadArticleCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadArticleCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadArticleCountArgs(%+v)", *p)

}

func (p *SpeedyReadArticleCountArgs) DeepEqual(ano *SpeedyReadArticleCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadArticleCountArgs) Field1DeepEqual(src *ArticleCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadArticleCountResult struct {
	Success *ArticleCountResponse `thrift:"success,0,optional" frugal:"0,optional,ArticleCountResponse" json:"success,omitempty"`
}

func NewSpeedyReadArticleCountResult() *SpeedyReadArticleCountResult {
	return &SpeedyReadArticleCountResult{}
}

func (p *SpeedyReadArticleCountResult) InitDefault() {
	*p = SpeedyReadArticleCountResult{}
}

var SpeedyReadArticleCountResult_Success_DEFAULT *ArticleCountResponse

func (p *SpeedyReadArticleCountResult) GetSuccess() (v *ArticleCountResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadArticleCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadArticleCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*ArticleCountResponse)
}

var fieldIDToName_SpeedyReadArticleCountResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadArticleCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadArticleCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadArticleCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadArticleCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewArticleCountResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadArticleCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadArticleCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadArticleCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadArticleCountResult(%+v)", *p)

}

func (p *SpeedyReadArticleCountResult) DeepEqual(ano *SpeedyReadArticleCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadArticleCountResult) Field0DeepEqual(src *ArticleCountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadSaveArticleSummaryArgs struct {
	Req *SaveArticleSummaryRequest `thrift:"req,1" frugal:"1,default,SaveArticleSummaryRequest" json:"req"`
}

func NewSpeedyReadSaveArticleSummaryArgs() *SpeedyReadSaveArticleSummaryArgs {
	return &SpeedyReadSaveArticleSummaryArgs{}
}

func (p *SpeedyReadSaveArticleSummaryArgs) InitDefault() {
	*p = SpeedyReadSaveArticleSummaryArgs{}
}

var SpeedyReadSaveArticleSummaryArgs_Req_DEFAULT *SaveArticleSummaryRequest

func (p *SpeedyReadSaveArticleSummaryArgs) GetReq() (v *SaveArticleSummaryRequest) {
	if !p.IsSetReq() {
		return SpeedyReadSaveArticleSummaryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadSaveArticleSummaryArgs) SetReq(val *SaveArticleSummaryRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadSaveArticleSummaryArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadSaveArticleSummaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadSaveArticleSummaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadSaveArticleSummaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadSaveArticleSummaryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSaveArticleSummaryRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadSaveArticleSummaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveArticleSummary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadSaveArticleSummaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadSaveArticleSummaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadSaveArticleSummaryArgs(%+v)", *p)

}

func (p *SpeedyReadSaveArticleSummaryArgs) DeepEqual(ano *SpeedyReadSaveArticleSummaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadSaveArticleSummaryArgs) Field1DeepEqual(src *SaveArticleSummaryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadSaveArticleSummaryResult struct {
	Success *SaveArticleSummaryResponse `thrift:"success,0,optional" frugal:"0,optional,SaveArticleSummaryResponse" json:"success,omitempty"`
}

func NewSpeedyReadSaveArticleSummaryResult() *SpeedyReadSaveArticleSummaryResult {
	return &SpeedyReadSaveArticleSummaryResult{}
}

func (p *SpeedyReadSaveArticleSummaryResult) InitDefault() {
	*p = SpeedyReadSaveArticleSummaryResult{}
}

var SpeedyReadSaveArticleSummaryResult_Success_DEFAULT *SaveArticleSummaryResponse

func (p *SpeedyReadSaveArticleSummaryResult) GetSuccess() (v *SaveArticleSummaryResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadSaveArticleSummaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadSaveArticleSummaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*SaveArticleSummaryResponse)
}

var fieldIDToName_SpeedyReadSaveArticleSummaryResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadSaveArticleSummaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadSaveArticleSummaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadSaveArticleSummaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadSaveArticleSummaryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSaveArticleSummaryResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadSaveArticleSummaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveArticleSummary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadSaveArticleSummaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadSaveArticleSummaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadSaveArticleSummaryResult(%+v)", *p)

}

func (p *SpeedyReadSaveArticleSummaryResult) DeepEqual(ano *SpeedyReadSaveArticleSummaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadSaveArticleSummaryResult) Field0DeepEqual(src *SaveArticleSummaryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadGetArticleSummaryListArgs struct {
	Req *ArticleSummaryListRequest `thrift:"req,1" frugal:"1,default,ArticleSummaryListRequest" json:"req"`
}

func NewSpeedyReadGetArticleSummaryListArgs() *SpeedyReadGetArticleSummaryListArgs {
	return &SpeedyReadGetArticleSummaryListArgs{}
}

func (p *SpeedyReadGetArticleSummaryListArgs) InitDefault() {
	*p = SpeedyReadGetArticleSummaryListArgs{}
}

var SpeedyReadGetArticleSummaryListArgs_Req_DEFAULT *ArticleSummaryListRequest

func (p *SpeedyReadGetArticleSummaryListArgs) GetReq() (v *ArticleSummaryListRequest) {
	if !p.IsSetReq() {
		return SpeedyReadGetArticleSummaryListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadGetArticleSummaryListArgs) SetReq(val *ArticleSummaryListRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadGetArticleSummaryListArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadGetArticleSummaryListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadGetArticleSummaryListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadGetArticleSummaryListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadGetArticleSummaryListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewArticleSummaryListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadGetArticleSummaryListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetArticleSummaryList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadGetArticleSummaryListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadGetArticleSummaryListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadGetArticleSummaryListArgs(%+v)", *p)

}

func (p *SpeedyReadGetArticleSummaryListArgs) DeepEqual(ano *SpeedyReadGetArticleSummaryListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadGetArticleSummaryListArgs) Field1DeepEqual(src *ArticleSummaryListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadGetArticleSummaryListResult struct {
	Success *ArticleSummaryListResponse `thrift:"success,0,optional" frugal:"0,optional,ArticleSummaryListResponse" json:"success,omitempty"`
}

func NewSpeedyReadGetArticleSummaryListResult() *SpeedyReadGetArticleSummaryListResult {
	return &SpeedyReadGetArticleSummaryListResult{}
}

func (p *SpeedyReadGetArticleSummaryListResult) InitDefault() {
	*p = SpeedyReadGetArticleSummaryListResult{}
}

var SpeedyReadGetArticleSummaryListResult_Success_DEFAULT *ArticleSummaryListResponse

func (p *SpeedyReadGetArticleSummaryListResult) GetSuccess() (v *ArticleSummaryListResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadGetArticleSummaryListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadGetArticleSummaryListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ArticleSummaryListResponse)
}

var fieldIDToName_SpeedyReadGetArticleSummaryListResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadGetArticleSummaryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadGetArticleSummaryListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadGetArticleSummaryListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadGetArticleSummaryListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewArticleSummaryListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadGetArticleSummaryListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetArticleSummaryList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadGetArticleSummaryListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadGetArticleSummaryListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadGetArticleSummaryListResult(%+v)", *p)

}

func (p *SpeedyReadGetArticleSummaryListResult) DeepEqual(ano *SpeedyReadGetArticleSummaryListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadGetArticleSummaryListResult) Field0DeepEqual(src *ArticleSummaryListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadArticleSummaryCountArgs struct {
	Req *ArticleSummaryCountRequest `thrift:"req,1" frugal:"1,default,ArticleSummaryCountRequest" json:"req"`
}

func NewSpeedyReadArticleSummaryCountArgs() *SpeedyReadArticleSummaryCountArgs {
	return &SpeedyReadArticleSummaryCountArgs{}
}

func (p *SpeedyReadArticleSummaryCountArgs) InitDefault() {
	*p = SpeedyReadArticleSummaryCountArgs{}
}

var SpeedyReadArticleSummaryCountArgs_Req_DEFAULT *ArticleSummaryCountRequest

func (p *SpeedyReadArticleSummaryCountArgs) GetReq() (v *ArticleSummaryCountRequest) {
	if !p.IsSetReq() {
		return SpeedyReadArticleSummaryCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SpeedyReadArticleSummaryCountArgs) SetReq(val *ArticleSummaryCountRequest) {
	p.Req = val
}

var fieldIDToName_SpeedyReadArticleSummaryCountArgs = map[int16]string{
	1: "req",
}

func (p *SpeedyReadArticleSummaryCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SpeedyReadArticleSummaryCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadArticleSummaryCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadArticleSummaryCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewArticleSummaryCountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadArticleSummaryCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleSummaryCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadArticleSummaryCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpeedyReadArticleSummaryCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadArticleSummaryCountArgs(%+v)", *p)

}

func (p *SpeedyReadArticleSummaryCountArgs) DeepEqual(ano *SpeedyReadArticleSummaryCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SpeedyReadArticleSummaryCountArgs) Field1DeepEqual(src *ArticleSummaryCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SpeedyReadArticleSummaryCountResult struct {
	Success *ArticleSummaryCountResponse `thrift:"success,0,optional" frugal:"0,optional,ArticleSummaryCountResponse" json:"success,omitempty"`
}

func NewSpeedyReadArticleSummaryCountResult() *SpeedyReadArticleSummaryCountResult {
	return &SpeedyReadArticleSummaryCountResult{}
}

func (p *SpeedyReadArticleSummaryCountResult) InitDefault() {
	*p = SpeedyReadArticleSummaryCountResult{}
}

var SpeedyReadArticleSummaryCountResult_Success_DEFAULT *ArticleSummaryCountResponse

func (p *SpeedyReadArticleSummaryCountResult) GetSuccess() (v *ArticleSummaryCountResponse) {
	if !p.IsSetSuccess() {
		return SpeedyReadArticleSummaryCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SpeedyReadArticleSummaryCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*ArticleSummaryCountResponse)
}

var fieldIDToName_SpeedyReadArticleSummaryCountResult = map[int16]string{
	0: "success",
}

func (p *SpeedyReadArticleSummaryCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SpeedyReadArticleSummaryCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpeedyReadArticleSummaryCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpeedyReadArticleSummaryCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewArticleSummaryCountResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SpeedyReadArticleSummaryCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleSummaryCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpeedyReadArticleSummaryCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SpeedyReadArticleSummaryCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpeedyReadArticleSummaryCountResult(%+v)", *p)

}

func (p *SpeedyReadArticleSummaryCountResult) DeepEqual(ano *SpeedyReadArticleSummaryCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SpeedyReadArticleSummaryCountResult) Field0DeepEqual(src *ArticleSummaryCountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
